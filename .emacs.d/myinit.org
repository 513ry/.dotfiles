#+SEQ_TODO:  Error(e) Warring(w) | Correct(c)

* init.el - configuration file for emacs
Hey! This is my personal emacs configuration. It needs
babel-eval to run correctly. All other packages will be
auto installed. Please run this together with .emacs file
witch shold be located in to your $HOME direcory.

Copyright (C) 2017-2018 Daniel Sierpiński <siery@comic.com>

You can redistribute this document and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.

This document is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

* Correct Autogegenerated
  Those variables and faces are autogenerated while
  starting an emacs secion. There is no need to modify
  them manualy.
  #+BEGIN_SRC 
  (custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(package-selected-packages
    (quote
      (git-emacs zerodark-theme xah-css-mode use-package-ensure-system-package try sexy-monochrome-theme projectile popwin pdf-tools org-mobile-sync org-babel-eval-in-repl omnisharp ob-browser multi-web-mode mmm-mode log4e inf-ruby helm-swoop helm-ag-r gntp git geiser geben flymake-php flymake-css flycheck-clang-analyzer find-file-in-project eslint-fix enh-ruby-mode edit-color-stamp company-plsense cmm-mode circe babel-repl babel auto-package-update auto-complete-c-headers ag ac-php ac-js2 ac-html))))

  (custom-set-faces
    ;; custom-set-faces was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
  )
  #+END_SRC
  
* Correct Interface
  Set up user data and general interface
  #+BEGIN_SRC emacs-lisp
  (setq user-full-name "Daniel <Siery> Sierpiński")
  (setq user-mail-address "siery@comic.com")

  (setq initial-scratch-message ";; SCRATCH YOUR THOUGHTS HERE.\n\n")
  (setq inhibit-startup-echo-area-message "Welcome Siery")
  (setq inhibit-startup-message t)
  
   (when window-system
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (tooltip-mode -1)
    (scroll-bar-mode -1))

  (fset 'yse-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f9>") 'revert-buffer)
  #+END_SRC

* Correct Packages Control
  #+BEGIN_SRC emacs-lisp
  (use-package try :ensure t)
  #+END_SRC

* Correct Variables
  #+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (setq backup-directory-alist
    `((".*" . ,"/tmp/.backup")))
  (setq auto-save-file-name-transforms
    `((".*" ,"/tmp/.backup" t)))
  #+END_SRC

* Correct My lambdas and functions
  #+BEGIN_SRC emacs-lisp
;; Automaticly switch to sudo mode while opening a file when necessary
(defadvice find-file (after find-file-sudo activate)
  "Find file as root if necessary."
  (unless (and buffer-file-name
               (file-writable-p buffer-file-name))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

;; Insert file path (designet to insert image paths for blog posts
;; inside org-mode
(defun my-insert-file-name (filename &optional args)
  "Insert name of file FILENAME into buffer after point.
  
  Prefixed with \\[universal-argument], expand the file name to
  its fully canocalized path.  See `expand-file-name'.
  
  Prefixed with \\[negative-argument], use relative path to file
  name from current directory, `default-directory'.  See
  `file-relative-name'.
  
  The default with no prefix is to insert the file name exactly as
  it appears in the minibuffer prompt."
  ;; Based on insert-file in Emacs -- ashawley 20080926
  (interactive "*fInsert file name: \nP")
  (cond ((eq '- args)
	 (insert (file-relative-name filename)))
	((not (null args))
	 (insert (expand-file-name filename)))
	(t
	 (insert filename))))

  #+END_SRC

* Correct Theme
  #+BEGIN_SRC emacs-lisp
  (use-package zerodark-theme
    :ensure t
    :config
    (load-theme 'zerodark t)
    (zerodark-setup-modeline-format))
  #+END_SRC
  
* Correct Graphic's engine
  #+BEGIN_SRC emacs-lisp
  ;; popup windows setup
  (use-package popwin
    :ensure t
    :config
    (popwin-mode t))

  ;; Helm
  (use-package helm :ensure t)
  (use-package helm-swoop
    :ensure t
    :config
    (setq helm-swoop-speed-or-color nil))
  #+END_SRC

* Correct Autocompletion
  #+BEGIN_SRC emacs-lisp
  ;; yas
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode t))

  ;; auto-complete setup
  (use-package auto-complete
    :ensure t
    :config
    (ac-config-default))

  ;; company setup
  (use-package company
    :ensure f
    :config
    (add-to-list 'company-backends 'company-plsense)
    (add-hook 'perl-mode-hook 'company-mode)
    (add-hook 'cperl-mode-hook 'company-mode)
    (add-hook 'after-init-hook 'company-mode))
  #+END_SRC

* Correct Autovalidation
  #+BEGIN_SRC emacs-lisp
  ;; Flycheck
  (use-package flycheck
    :ensure t
    :config
    (global-flycheck-mode))
  #+END_SRC

* Correct Publishing and Jekyll
* Correct ORG
  #+BEGIN_SRC emacs-lisp
  (with-eval-after-load "ob"
    (use-package org-babel-eval-in-repl
      :config
      (define-key org-mode-map (kbd "C-<return>") 'ober-eval-in-repl)
      (define-key org-mode-map (kbd "C-c C-c") 'ober-eval-block-in-repl)
      (with-eval-after-load "eval-in-repl"
        (setq eir-jump-after-eval nil))))
  #+END_SRC

* Correct Project menageing
  #+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (setq projectile-enable-caching t) ; To avoid slow indexing
    :config
    (projectile-mode t))

  ;; Enable fd for faster file search
  `(setq ffip-use-rust-fd t)'

  ;; Enable silver-search with helm
  (use-package ag
    :ensure t
    :ensure-system-package (ag . "wajig install ag")
    :config
    (use-package helm-ag-r :ensure t))
  #+END_SRC

* Correct Document view
  #+BEGIN_SRC emacs-lisp
  ;; phantom js link
  (add-to-list 'exec-path "/opt/local/bin")
  (setenv "PATH" (mapconcat 'identity exec-path ":"))

  (pdf-tools-install)
  #+END_SRC

* Correct Git
  #+BEGIN_SRC emacs-lisp
  (use-package git
    :ensure t
    :config

      (autoload 'git-blame-mode "git-blame" "Minor mode for incremental blame for Git." t))
  #+END_SRC

* Correct Turing Languages
  + C/C++
    #+BEGIN_SRC emacs-lisp
    (defun my:c-lang-support ()
    ;; Auto-Complete C headers
      (use-package auto-complete-c-headers
        :ensure t
	:config (add-to-list 'ac-sources 'ac-source-c-headers)))

    ;; hook support for c/c++
    (add-hook 'c++-mode-hook 'my:c-lang-support)
    (add-hook 'c-mode-hook 'my:c-lang-support)

    ;; Live compilation
    (with-eval-after-load 'flycheck
      (use-package flycheck-clang-analyzer
        :ensure t
	:config
	(flycheck-clang-analyzer-setup)))

    #+END_SRC

  + Ruby
      #+BEGIN_SRC emacs-lisp
      (use-package inf-ruby :ensure t)
      (use-package enh-ruby-mode
        :ensure t
	:load-path "(path-to)/Enhanced-Ruby-Mode"
	:config
	(autoload 'enh-ruby-mode "enh-ruby-mode" "Major mode for ruby files" t)
	(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
	(add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))
      ;; inf-ruby REPL
      (autoload 'inf-ruby "inf-ruby" "Run an inferior Ruby process" t)
      (add-hook 'enh-ruby-mode-hook 'inf-ruby-minor-mode)
      (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter)

      (eval-after-load 'inf-ruby
        '(define-key inf-ruby-minor-mode-map
          (kbd "C-c s") 'inf-ruby-console-auto)))
      #+END_SRC

  + PHP
      #+BEGIN_SRC emacs-lisp
      (use-package php-mode
        :ensure t
	:config
	(defun my:php-mode-hook ()
	"My PHP mode configuration."
	'(define-abbrev php-mode-abbrev-table "ex" "extends"))
        (add-hook 'php-mode-hook 'my:php-mode-hook)

        ;; Gaben - Script Debug
        (setq load-path (cons "/home/siery/.emacs.d/elpa/geben-20170801.551/" load-path))
        (autoload 'geben "geben" "DBGp protocol frontend, a script debugger" t)
        ;; Debug a simple PHP script.
        (defun my-php-debug ()
          "Run current PHP script for debugging with geben."
          (interactive)
	  (call-interactively 'geben)
	  (shell-command
	     (concat "XDEBUG_CONFIG='idekey=my-php-7.0' /usr/bin/php7.0 "
	    (buffer-file-name) " &")))
	  
        ;; PHP auto-complete integration
        (auto-complete-mode t)
        (use-package ac-php :ensure t)
        (setq ac-sources  '(ac-source-php ) )
        (define-key php-mode-map  (kbd "C-]") 'ac-php-find-symbol-at-point)   ;goto define
        (define-key php-mode-map  (kbd "C-t") 'ac-php-location-stack-back))   ;go back

      ;;(require 'flymake-php)
      ;;add-hook 'php-mode-hook 'flymake-php-load)
      #+END_SRC

  + C#
      #+BEGIN_SRC emacs-lisp
      (use-package csharp-mode
        :ensure f
	:init
	(setq auto-mode-alist
	  (append '(("\\.cs$" . csharp-mode)) auto-mode-alist))
	:config
	(defun my-csharp-mode-fn ()
	  "function that runs when csharp-mode is initialized for a buffer."
	  (turn-on-auto-revert-mode)
	  (setq indent-tabs-mode nil))
	(add-hook  'csharp-mode-hook 'my-csharp-mode-fn t)
	(add-hook 'csharp-mode-hook 'omnisharp-mode)
	(eval-after-load
	  'company
	    '(add-to-list 'company-backends 'company-omnisharp))
	    
	(add-hook 'csharp-mode-hook #'company-mode))
      #+END_SRC

* Correct Web developement
  + CSS
    #+BEGIN_SRC emacs-lisp
    ;; (use-package flymake-css
    ;;   :ensure t
    ;;   :config (add-hook 'css-mode-hook 'flymake-css-load))
    #+END_SRC

  + Multi Web Modes
    #+BEGIN_SRC emacs-lisp
    ;; Multi Web Mode
    (use-package multi-web-mode
      :ensure t
      :init
      (setq mweb-default-major-mode 'html-mode)
      :config
      (setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?= " "\\?>")
        (js2-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
        (css-mode "<style +type=\"text/css\"[^>]*>" "</style>"))))
    (setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
    (multi-web-global-mode t)

    ;; Set MMM Mode for embandet html code etc.
    ;;(use-package mmm-mode :ensure t)
    ;;
    ;;(setq mmm-global-mode 'maybe)
    ;;(mmm-add-mode-ext-class 'html-mode "\\.php\\'" 'html-php)

    ;; Set JS2 Mode as default
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
    (add-hook 'js2-mode-hook 'ac-js2-mode)
    `(setq ac-js2-evaluate-calls t)
    ;; JS experimental libs
    ;;(add-to-list 'ac-js2-external-libraries "path/to/lib/library.js")'
    
    ;; Hook Skewer mode
    (add-hook 'js2-mode-hook 'skewer-mode)
    (add-hook 'css-mode-hook 'skewer-css-mode)
    (add-hook 'html-mode-hook 'skewer-html-mode)
    #+END_SRC

* Correct Key bandings
  #+BEGIN_SRC emacs-lisp
  ;; My functions:
  (global-set-key [f5] 'my-php-debug)
  (global-set-key "\C-cr" 'my-insert-file-name)
  ;; Overwrite defaults:
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-c f") 'ff-find-other-file)
  ;; Project menager
  (global-set-key (kbd "C-x f") 'find-file-in-project)
  (global-set-key (kbd "C-c p") 'ffip-create-project-file)
  (global-set-key (kbd "C-x r p") 'project-find-regexp)
  ;; Helm-swoop:
  ;;(define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  ;;(define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
  (global-set-key (kbd "M-i") 'helm-swoop)
  (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
  (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
  (global-set-key (kbd "M-s s") 'helm-multi-swoop-all)
  #+END_SRC

